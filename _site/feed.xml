<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2021-03-16T10:42:49+01:00</updated><id>/feed.xml</id><title type="html">Finite Simulations</title><subtitle>An amazing website.</subtitle><author><name>Vikram Singh</name><email>vikram.singh@mpimet.mpg.de</email></author><entry><title type="html">Are wall models stable?</title><link href="/blog_paper_wall_model/" rel="alternate" type="text/html" title="Are wall models stable?" /><published>2021-03-16T00:00:00+01:00</published><updated>2021-03-16T00:00:00+01:00</updated><id>/blog_paper_wall_model</id><content type="html" xml:base="/blog_paper_wall_model/">&lt;p&gt;The second paper from my PhD got published recently in 
&lt;a href=&quot;https://www.sciencedirect.com/science/article/abs/pii/S0045793021000360&quot;&gt;Computers and Fluids&lt;/a&gt;.
If you don’t have access, there’s a free version on
&lt;a href=&quot;https://www.researchgate.net/publication/349396252_Impact_of_wall_modeling_on_kinetic_energy_stability_for_the_compressible_Navier-Stokes_equations&quot;&gt;ResearchGate&lt;/a&gt;
and the preprint on
&lt;a href=&quot;https://arxiv.org/abs/2102.05080&quot;&gt;Arxiv&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The idea of the paper was to look at wall models from an angle that
is not usually looked at.
Wall models are a popular way to reduce the cost of simulations.
To see why let us first say something about accurate ways of solving
for flow around walls, such as say the wing of an airplane.
Direct numerical simulation(DNS) is the most
accurate way to solve the Navier Stokes equations,
but if we have a wall then the cost of simulations is crazy expensive.
I think the Channel Flow test case, which is very idealized took
9 months to solve on a supercomputer for a realistic Reynolds’ number.
So usually people look at the next most accurate way of doing it,
which is large eddy simulation(LES).
However, the wall still poses a problem since the cost is
still exponenetial.
I recall a talk where people were using billions of grid points
to just solve the flow around a car. And I don’t think they were even doing LES.&lt;/p&gt;

&lt;p&gt;Hence wall models. The idea is to do LES away from the wall, 
and use a simple model near it.
The grid need not be so refined then and so we can get away
with doing simulations at much lower cost. 
However, stability is not usually something that is looked at when 
using wall models even though it is very important.
Without stability, you submit a simulation overnight, hoping to see results in the morning
and instead you come back to see that the solver stopped barely after starting.&lt;/p&gt;

&lt;p&gt;We looked at kinetic energy \(\frac{1}{2} \rho u^2\)(\(\rho\) being density and \(u\) being velocity) 
to see the effects of the wall model on it.
We proved that a simple relation at the wall decides the stability.
Using this, we looked at a couple of wall models.
It turns out that the algebraic wall model, which is very popular,
is actually unstable.
Which is surprising, not only because its so popular but because it
often gives fairly accurate results.
We created an idealized test case to demonstrate this issue
on an airfoil.
So next time you simulate flow around a wall, and start seeing
robustness issues, maybe the wall model is the issue.
On the other hand a recently developed slip wall model is actually stable,
but is not accurate.
So, we decided to test one that is a hybrid of the two.
It worked fairly well but we need to push the accuracy forward.&lt;/p&gt;

&lt;p&gt;I am happy at how the paper turned out and am really thankful to 
Prof. Nordström for pushing us to investigate this direction 
as well as his detailed revisions of the manuscript
and to Prof. Frankel for all his help.
Have a look at the paper and if you have any questions or suggestions
feel free to send me a message.&lt;/p&gt;</content><author><name>Vikram Singh</name><email>vikram.singh@mpimet.mpg.de</email></author><summary type="html">The second paper from my PhD got published recently in Computers and Fluids. If you don’t have access, there’s a free version on ResearchGate and the preprint on Arxiv.</summary></entry><entry><title type="html">Setting up the blog</title><link href="/blog_setup/" rel="alternate" type="text/html" title="Setting up the blog" /><published>2021-02-01T00:00:00+01:00</published><updated>2021-02-01T00:00:00+01:00</updated><id>/blog_setup</id><content type="html" xml:base="/blog_setup/">&lt;p&gt;Hello world!!&lt;/p&gt;

&lt;p&gt;I thought I will start of by posting on how I setup this blog.
First I decided to use 
&lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;
since I already had a Github account and it sounded simple to set it up.
Not simple at all as it turned out.
While there are many posts around with headlines like
setup your blog in 5 minutes, the reality is that 
it takes 5 minutes if you want to setup an exact replica of a pre-existing template.
Figure out how to do even the most simple customizations can take quite some time.
Let us begin then.&lt;/p&gt;

&lt;h2 id=&quot;first-steps&quot;&gt;First steps&lt;/h2&gt;

&lt;p&gt;I decided to use Jekyll since that is what Github recommends.
Now, Jekyll requires Ruby. A version of Ruby is already available on Mac. 
However, I had some issues, so I used Homebrew to install Ruby.
If you don’t have Ruby, please install it for your platform. 
Next, create a directory where you will keep the website files and 
in the terminal do the following inside this directory.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem install bundler jekyll
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, we could use the steps listed at various steps such as
&lt;a href=&quot;https://www.freecodecamp.org/news/create-a-free-static-site-with-github-pages-in-10-minutes/&quot;&gt;here&lt;/a&gt;
to use the default theme.
But I decided to use the 
&lt;a href=&quot;https://github.com/mmistakes/minimal-mistakes&quot;&gt;Minimal Mistakes&lt;/a&gt;
theme which looked better.
Download the repository to your folder and then inside the folder do&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And you are done! You can view your website by doing&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle exec jekyll serve  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and then putting the following in your browser.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://localhost:4000/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That took 5 minutes. So what’s the problem.
Well, quite a few of them. But first, the easy part.
Use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; to change things such as the name of the website,
your social media links etc. 
Every time, you make a change, you can do the above steps to open it in the browser
and check the results.
Its exactly like compiling and running!&lt;/p&gt;

&lt;h2 id=&quot;customize&quot;&gt;Customize&lt;/h2&gt;

&lt;p&gt;The very first thing I wanted to do was figure out how to add
a page for blog posts.
To do this add a folder &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_pages&lt;/code&gt; in the home directory
and inside this directory add a file called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;blog.md&lt;/code&gt;.
Write the following inside this file&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
title:  &quot;Blog&quot;
layout: archive
permalink: /Blog/
author_profile: true
---

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next edit the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_data/navigation.yml&lt;/code&gt; to look like this.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;main:
  - title: &quot;Blog&quot;
    url: /Blog/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This completes the setup. To write posts, create a new folder
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts&lt;/code&gt; and add blog posts there. The file must be named like this.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yyyy-mm-dd-name.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The top of the file must have&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
layout: single
title:  &quot;Name&quot;
date:   yyyy-mm-dd
---
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and then start writing your post below. Note that if you name the files with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.md&lt;/code&gt; 
extension, you are basically telling Jekyll that you are using 
&lt;a href=&quot;https://guides.github.com/features/mastering-markdown/&quot;&gt;Markdown&lt;/a&gt;.
So we are done with setting up blogging.
There’s a slight hitch though, although this is just a personal choice.
With this setup Jekyll puts the posts on your home page. 
I did not want this.
So I deleted the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.html&lt;/code&gt; page in the home directory
and added an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.md&lt;/code&gt; file with the following lines.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
title: &apos;About me&apos;
layout: single
author_profile: true
---
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;One more customization I decided to do was to add a newsletter sign-up form.
To do this, I signed up at 
&lt;a href=&quot;https://mailchimp.com/&quot;&gt;Mailchimp&lt;/a&gt;
and created an embedded signup form. 
Mailchimp gave me the HTML for the form which I copy-pasted into a new file
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_data/signup.html&lt;/code&gt;.
I also added the following line into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_layouts/single.html&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{# if page.signup == true #}{# include signup.html #}{# endif #}.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Replace &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%&lt;/code&gt; in the above. Jekyll thinks I am trying to execute
this from inside the blog post.
I modified the defaults in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; to add the signup line.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;defaults:
  - scope:
      path: &quot;&quot;
      type: posts
    values:
      layout: single
      author_profile: true
      share: true
      related: true
      signup: true
      signup: true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_pages/blog.md&lt;/code&gt; I added the following in the header.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;signup: true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Phew!!
And now we need to do the easiest part. 
Put it all online. 
Go to your GitHub account, and setup a new repository &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;username.github.io&lt;/code&gt;.
From the terminal do&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git init
git remote add origin git@github.com:&amp;lt;your_github_username&amp;gt;/&amp;lt;your_github_repo_name&amp;gt;.git
git add *
git commit -m &quot;Setting up Jekyll&quot;
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And we are done.
So that is how I setup my blog. 
Of course I continue to change things here and there. 
If you are interested, have a look at the files on my GitHub.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</content><author><name>Vikram Singh</name><email>vikram.singh@mpimet.mpg.de</email></author><summary type="html">Hello world!!</summary></entry></feed>